Hello again and welcome to week 2!

In this tutorial we will be looking at:
    - Recursion
    - Analysis of Algorithms

Admin stuff:
    - This code is available on a Github repository
    - You can get lab01 handmarked today or next week
    - This week's lab has no handmarking (fully automarked)





So, what is recursion?
    - Recursion is a way of solving problems where
    a problem is solved by solving a small part of it first,
    and then leaving the rest of it as a smaller, almost identical "subproblem"

    - fact(3) = 3 * 2 * 1
    - fact(3) = 3 * fact(2)
    - The iterative approach is to have a variable that initially stores
    the value 1, and then multiply it by the consecutive integers

    - The recursvie approach is to notice that fact(n) = n * fact(n - 1)
    The other thing we need is a base case fact(0) = 1

Why should we use recursion?
    - It can make our code look a lot simpler
    - Some problems are easier to solve when a recursive approach is used
    - Some programming languages do not have loops (so you have to use recursion!)

Downsides of recursion:
    - Slow
    - Memory intensive


Linked lists and recursion:
    - Linked lists can be thought of as either:
        - An empty list
        - A node, and the rest of the list




Analysis of algorithms
What is big-O?
    -

How do you calculate it?
    - e.g. T(n) = 3n^2 + 2n - 4 * log(n)

    1. Remove all coefficients
    -> n^2 + n - log(n)

    2. Take the term with the highest order
    -> O(n^2)

